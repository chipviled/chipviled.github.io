'use strict';

if (console.log === undefined) console.log = function () {};
console.log('%c                               \n   Are you like web console?   \n                               ', 'color:#FFFFFF;background-color:#993399;');

function template_iteration(data) {
    return '\n        <div class="iteration" data-id="' + data.id + '">\n          <div class="iteration_title">\n           <div class="iteration_name">' + data.theme + '</div>\n           <div class="iteration_date">' + data.date_begin + ' - ' + data.date_end + '</div>\n          </div>\n          <div class="iteration_body"></div>\n        </div>\n    ';
}

function template_picture(data) {
    return '\n        <div class="picture" data-id="' + data.id + '">\n          <div class="picture_body">\n              <img src="./data/upload/' + data.file_path + '/thumb_' + data.file_name + '" title="' + data.title + '">\n          </div>\n          <div class="picture_title">' + data.title + '</div>\n          <div class="picture_username">' + data.user_name + '</div>\n        </div>\n    ';
}

// TODO: Create this with for.
jQuery.when(jQuery.getJSON('./data/json/picture.json'), jQuery.getJSON('./data/json/users.json'), jQuery.getJSON('./data/json/iteration.json'), jQuery.getJSON('./data/json/achivement.json'), jQuery.getJSON('./data/json/user_achivement.json'), jQuery.getJSON('./data/json/user_vote.json')).done(function (picture, users, iteration, achivement, user_achivement, user_vote) {
    var data = {
        picture: picture[0],
        users: users[0],
        iteration: iteration[0],
        achivement: achivement[0],
        user_achivement: user_achivement[0],
        user_vote: user_vote[0]
    };

    work(data);
}).fail(function (e) {
    console.log('Error from load data.', e);
});

function work(data) {
    //     let res = alasql(`
    //         SELECT p.*, i.*, p.id AS picture_id, i.id AS iteration_id
    //         FROM ? p
    //         LEFT JOIN ? i ON p.iteration_id = i.id
    //         ORDER BY i.date_begin DESC, p.id
    //         `
    //         , [data.picture, data.iteration]
    //     );
    //     console.log(res);

    var template_iterations = jQuery('.iterations');

    var iterations_data = alasql('\n        SELECT i.*\n        FROM ? i\n        ORDER BY i.date_begin DESC\n        ', [data.iteration]);

    template_iterations.text('');

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = iterations_data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var row_i = _step.value;

            var t_object = jQuery(template_iteration(row_i));
            var iteration_body = t_object.find('.iteration_body');

            var pistures_data = alasql('\n            SELECT p.*, u.name AS user_name, u.sity_id AS user_sity_id\n            FROM ? p\n            LEFT JOIN ? u ON u.id = p.user_id\n            WHERE p.iteration_id = ?\n            ORDER BY p.id\n            ', [data.picture, data.users, row_i.id]);
            console.log(pistures_data);

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = pistures_data[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var row_p = _step2.value;

                    iteration_body.append(jQuery(template_picture(row_p)));
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            template_iterations.append(t_object);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
}